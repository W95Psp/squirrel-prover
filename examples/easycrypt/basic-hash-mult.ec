
(* (* Basic Hash protocol, with n+1 tags and one reader. *) *)
(* module BasicHashN = { *)
(*   var ks : key list *)

(*   (* We always have at least one key. *) *)
(*   proc init (n : int) : unit = { *)
(*     var i, x; *)
(*     i <- 0; *)
(*     while (i <= n){ *)
(*       x <$ dkey; *)
(*       ks <- x :: ks; *)
(*     } *)
(*   } *)

(*   proc tag (i : int) : ptxt = { *)
(*     var k, n, x; *)
(*     n <$ dnonce; *)
(*     i <- if (size ks <= i) then 0 else i; *)
(*     k <- nth witness ks i; *)
(*     x <- pair n (H k n); *)
(*     return x; *)
(*   } *)

(*   proc reader (m : ptxt) : bool = { *)
(*     var i, b, k; *)
(*     i <- 0; *)
(*     b <- false; *)
(*     while (i < size ks){       *)
(*       k <- nth witness ks i; *)
(*       b <- b || snd m = H k (fst m); *)
(*     } *)
(*     return b; *)
(*   } *)
(* }. *)

