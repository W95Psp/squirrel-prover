hash h
name k:message
channel c
name n:message
name m:message
system null.

(* Test direct case *)
equiv test : h(diff(m,n),k),h(diff(n,m),k) .
Proof.
prf 1.

yesif 1.
simpl.

prf 0.
Qed.


system [test]  in(c,x); let surp = diff(m,n) in let mac = h(<x,surp>,k) in  out(c,mac); out(c,h(diff(<x,n>,<x,m>),k)).

equiv [left,test] [right,test] test2.
Proof.

induction t.
expandall.

fa 1. fa 2. prf 2.

yesif 2.
split.
case H0. case H0.

expandall.
fa 1; fa 2. prf 2. yesif 2.

split.
split.
case H0.


(* Here, if the macros are not correclty projected, we cannot prove the goal. *)
expand surp@A.
help.


case H0.
depends A, A1.
case H0.
depends A, A1.
Qed.
